# =============================================================================# EC2 Instance Configuration

# Assignment 3 - Terraform Variables Configurationec2_instance_id = "i-0aaedfc6a70038409"

# Student: n11817143 (Aswanth Raj)ec2_public_ip = "13.210.156.163"

# Date: October 30, 2025ec2_public_dns = "ec2-13-210-156-163.ap-southeast-2.compute.amazonaws.com"

# =============================================================================

# ElastiCache configuration - using existing cluster values

# -----------------------------------------------------------------------------# Include ALL subnets from existing subnet group to avoid modification conflicts

# AWS Account & Regioncache_subnet_ids = [

# -----------------------------------------------------------------------------  "subnet-05d0352bb15852524",

aws_account_id = "901444280953"  "subnet-04cc288ea3b2e1e53", 

aws_region     = "ap-southeast-2"  "subnet-08e89ff0d9b49c9ae",

environment    = "prod"  "subnet-075811427d5564cf9",

student_id     = "n11817143"  "subnet-07ea9e4f9cc9159ca",

  "subnet-05a3b8177138c8b14",

# -----------------------------------------------------------------------------  "subnet-04ca053dcbe5f49cc"

# Networking Configuration]

# -----------------------------------------------------------------------------

vpc_id = "vpc-007bab53289655834"  # aws-controltower-VPCcache_security_group_ids = [

  "sg-078997505ad1c6bbc",

# Public Subnets (for Application Load Balancer)  "sg-07707a36aa1599475"

public_subnet_ids = []

  "subnet-05a3b8177138c8b14",  # aws-controltower-PublicSubnet1

  "subnet-075811427d5564cf9",  # aws-controltower-PublicSubnet2# Match existing cluster configuration

  "subnet-04ca053dcbe5f49cc",  # aws-controltower-PublicSubnet3elasticache_node_type = "cache.t4g.micro"
]

# Private Subnets (for ECS Fargate tasks)
private_subnet_ids = [
  "subnet-04cc288ea3b2e1e53",  # aws-controltower-PrivateSubnet1A
  "subnet-08e89ff0d9b49c9ae",  # aws-controltower-PrivateSubnet2A
  "subnet-05d0352bb15852524",  # aws-controltower-PrivateSubnet3A
]

# Availability Zones
availability_zones = [
  "ap-southeast-2a",
  "ap-southeast-2b",
  "ap-southeast-2c",
]

# -----------------------------------------------------------------------------
# Domain & DNS Configuration
# -----------------------------------------------------------------------------
domain_name        = "n11817143-videoapp.cab432.com"
static_domain_name = "static.n11817143-videoapp.cab432.com"
hosted_zone_id     = "Z02680423BHWEVRU2JZDQ"  # cab432.com
hosted_zone_name   = "cab432.com"

# -----------------------------------------------------------------------------
# Amazon Cognito Configuration
# -----------------------------------------------------------------------------
cognito_user_pool_id  = "ap-southeast-2_CdVnmKfW"
cognito_user_pool_arn = "arn:aws:cognito-idp:ap-southeast-2:901444280953:userpool/ap-southeast-2_CdVnmKfW"

# Cognito App Clients
cognito_web_client_id    = "1dnnr9c18vuk983t8iojkgd8e"      # n11817143-web-client
cognito_public_client_id = "296uu7cjlfinpnspc04kp53p83"    # n11817143-a2-public-client

# -----------------------------------------------------------------------------
# Storage - S3 Buckets
# -----------------------------------------------------------------------------
s3_video_bucket_name = "n11817143-a2"  # Existing video storage bucket
s3_video_bucket_arn  = "arn:aws:s3:::n11817143-a2"

# S3 Folder Structure
s3_raw_videos_prefix       = "raw/"
s3_processed_videos_prefix = "processed/"
s3_thumbnails_prefix       = "thumbs/"

# Terraform State Storage
s3_terraform_state_bucket = "n11817143-terraform-state"
dynamodb_terraform_locks  = "n11817143-terraform-locks"

# -----------------------------------------------------------------------------
# Database - DynamoDB
# -----------------------------------------------------------------------------
dynamodb_table_name = "n11817143-VideoApp"
dynamodb_table_arn  = "arn:aws:dynamodb:ap-southeast-2:901444280953:table/n11817143-VideoApp"

# Table Schema
dynamodb_hash_key  = "ownerId"  # Partition key
dynamodb_range_key = "videoId"  # Sort key

# -----------------------------------------------------------------------------
# Cache - ElastiCache (Memcached)
# -----------------------------------------------------------------------------
elasticache_cluster_id = "n11817143-a2-cache"
elasticache_endpoint   = "n11817143-a2-cache.km2jzi.0001.apse2.cache.amazonaws.com"
elasticache_port       = 11211
elasticache_node_type  = "cache.t4g.micro"

# -----------------------------------------------------------------------------
# Secrets Management
# -----------------------------------------------------------------------------
secrets_manager_secret_name = "n11817143-a2-secret"
secrets_manager_secret_arn  = "arn:aws:secretsmanager:ap-southeast-2:901444280953:secret:n11817143-a2-secret-01KltY"

# Parameter Store Prefix
parameter_store_prefix = "/n11817143/app"

# -----------------------------------------------------------------------------
# Container Registry - Amazon ECR
# -----------------------------------------------------------------------------
ecr_repository_urls = {
  video_api        = "901444280953.dkr.ecr.ap-southeast-2.amazonaws.com/n11817143/video-api"
  admin_service    = "901444280953.dkr.ecr.ap-southeast-2.amazonaws.com/n11817143/admin-service"
  transcode_worker = "901444280953.dkr.ecr.ap-southeast-2.amazonaws.com/n11817143/transcode-worker"
  lambda_s3_to_sqs = "901444280953.dkr.ecr.ap-southeast-2.amazonaws.com/n11817143/s3-to-sqs-lambda"
}

ecr_repository_names = {
  video_api        = "n11817143/video-api"
  admin_service    = "n11817143/admin-service"
  transcode_worker = "n11817143/transcode-worker"
  lambda_s3_to_sqs = "n11817143/s3-to-sqs-lambda"
}

# -----------------------------------------------------------------------------
# ECS Configuration
# -----------------------------------------------------------------------------
ecs_cluster_name = "n11817143-cluster"

# ECS Service Configuration
ecs_services = {
  video_api = {
    name           = "n11817143-video-api"
    cpu            = 512
    memory         = 1024
    desired_count  = 2
    container_port = 8080
    min_capacity   = 1
    max_capacity   = 10
  }
  
  admin = {
    name           = "n11817143-admin"
    cpu            = 256
    memory         = 512
    desired_count  = 1
    container_port = 8080
    min_capacity   = 1
    max_capacity   = 5
  }
  
  transcode_worker = {
    name          = "n11817143-transcode-worker"
    cpu           = 1024
    memory        = 2048
    desired_count = 0  # Scales based on queue depth
    min_capacity  = 0
    max_capacity  = 10
  }
}

# -----------------------------------------------------------------------------
# Application Load Balancer Configuration
# -----------------------------------------------------------------------------
alb_name = "n11817143-alb"

# ALB Listener Configuration
alb_http_port  = 80
alb_https_port = 443

# Health Check Configuration
health_check_path                = "/healthz"
health_check_interval            = 30
health_check_timeout             = 5
health_check_healthy_threshold   = 2
health_check_unhealthy_threshold = 3
health_check_matcher             = "200"

# -----------------------------------------------------------------------------
# Auto Scaling Configuration
# -----------------------------------------------------------------------------
autoscaling_target_cpu_percentage = 50.0  # Target CPU for scaling
autoscaling_scale_in_cooldown     = 300   # 5 minutes
autoscaling_scale_out_cooldown    = 60    # 1 minute

# SQS Queue Depth Scaling (for transcode worker)
sqs_target_messages_per_task = 5.0

# -----------------------------------------------------------------------------
# Lambda Function Configuration
# -----------------------------------------------------------------------------
lambda_s3_to_sqs_name    = "n11817143-s3-to-sqs"
lambda_timeout           = 60
lambda_memory_size       = 512
lambda_runtime           = "nodejs18.x"  # For container: package_type = "Image"

# -----------------------------------------------------------------------------
# Messaging - SQS & SNS
# -----------------------------------------------------------------------------
sqs_video_processing_queue_name = "n11817143-video-processing"
sqs_dlq_queue_name              = "n11817143-video-processing-dlq"
sqs_visibility_timeout          = 300     # 5 minutes
sqs_message_retention           = 1209600 # 14 days
sqs_max_receive_count           = 3       # Before moving to DLQ

sns_video_events_topic_name = "n11817143-video-events"

# -----------------------------------------------------------------------------
# CloudFront CDN Configuration
# -----------------------------------------------------------------------------
cloudfront_distribution_comment = "n11817143 Static Assets CDN"
cloudfront_price_class          = "PriceClass_All"
cloudfront_default_ttl          = 86400    # 1 day
cloudfront_max_ttl              = 31536000 # 1 year
cloudfront_min_ttl              = 0

# Cache Behavior TTLs
cloudfront_thumbnails_ttl = 604800  # 7 days
cloudfront_static_ttl     = 2592000 # 30 days

# -----------------------------------------------------------------------------
# CloudWatch Monitoring
# -----------------------------------------------------------------------------
cloudwatch_log_retention_days = 7  # Cost optimization

# Alarm Configuration
alarm_alb_5xx_threshold          = 10
alarm_alb_5xx_evaluation_periods = 2
alarm_dlq_messages_threshold     = 5
alarm_lambda_errors_threshold    = 5

# CloudWatch Metrics Namespace
custom_metrics_namespace = "n11817143/VideoApp"

# -----------------------------------------------------------------------------
# Tags (Applied to all resources)
# -----------------------------------------------------------------------------
common_tags = {
  Project     = "CAB432-Assignment3"
  Student     = "n11817143"
  Environment = "production"
  ManagedBy   = "Terraform"
  Assignment  = "A3"
  Course      = "CAB432"
  Semester    = "2025-S2"
}

# -----------------------------------------------------------------------------
# Cost Optimization Flags
# -----------------------------------------------------------------------------
enable_fargate_spot           = false  # Set to true to use Fargate Spot (70% savings)
enable_nat_gateway_ha         = false  # Set to true for multi-AZ NAT (increases cost)
enable_cloudwatch_insights    = true   # Container Insights for ECS
enable_alb_access_logs        = false  # Set to true for ALB access logging
enable_s3_intelligent_tiering = false  # Set to true for S3 cost optimization

# -----------------------------------------------------------------------------
# Security Configuration
# -----------------------------------------------------------------------------
allowed_cidr_blocks = [
  "0.0.0.0/0"  # Allow all for public ALB (restrict in production)
]

# SSL/TLS Configuration
ssl_policy = "ELBSecurityPolicy-TLS13-1-2-2021-06"

# -----------------------------------------------------------------------------
# Feature Flags
# -----------------------------------------------------------------------------
enable_cloudfront    = true
enable_lambda        = true
enable_dlq_alarms    = true
enable_auto_scaling  = true
enable_https_only    = true
enable_custom_domain = true

# -----------------------------------------------------------------------------
# Application Configuration (Environment Variables for Containers)
# -----------------------------------------------------------------------------
app_environment_variables = {
  NODE_ENV                  = "production"
  AWS_REGION                = "ap-southeast-2"
  LOG_LEVEL                 = "info"
  ENABLE_CACHE              = "true"
  CACHE_TTL                 = "3600"
  MAX_VIDEO_SIZE_MB         = "500"
  ALLOWED_VIDEO_FORMATS     = "mp4,avi,mov,mkv"
  TRANSCODE_OUTPUT_FORMAT   = "mp4"
  TRANSCODE_OUTPUT_QUALITY  = "720p"
  THUMBNAIL_WIDTH           = "320"
  THUMBNAIL_HEIGHT          = "180"
}
