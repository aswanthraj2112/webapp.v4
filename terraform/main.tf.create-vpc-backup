# ==========================================
# Terraform Configuration for Microservices Architecture
# CAB432 Assignment 3 - Video App
# ==========================================

terraform {
  required_version = ">= 1.5.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
  
  default_tags {
    tags = {
      "qut-username" = "n11817143@qut.edu.au"
      ManagedBy      = "Terraform"
      Student        = "n11817143"
      Project        = "CAB432-VideoApp"
    }
  }
}

# Data Sources
data "aws_caller_identity" "current" {}

data "aws_availability_zones" "available" {
  state = "available"
}

# Local Variables
locals {
  account_id         = data.aws_caller_identity.current.account_id
  availability_zones = slice(data.aws_availability_zones.available.names, 0, var.az_count)
  
  common_tags = {
    Project       = var.project_name
    Environment   = var.environment
    ManagedBy     = "Terraform"
    Student       = "n11817143"
    Assignment    = "CAB432-A3"
    "qut-username" = "n11817143@qut.edu.au"
  }
}

# ==========================================
# VPC and Networking
# ==========================================

module "vpc" {
  source = "./modules/vpc"

  project_name       = var.project_name
  environment        = var.environment
  vpc_cidr           = var.vpc_cidr
  availability_zones = local.availability_zones
  enable_nat_gateway = var.enable_nat_gateway
  enable_flow_logs   = var.enable_vpc_flow_logs
}

module "security_groups" {
  source = "./modules/security-groups"

  project_name = var.project_name
  environment  = var.environment
  vpc_id       = module.vpc.vpc_id
}

# ==========================================
# Application Load Balancer
# ==========================================

module "alb" {
  source = "./modules/alb"

  project_name              = var.project_name
  environment               = var.environment
  vpc_id                    = module.vpc.vpc_id
  public_subnet_ids         = module.vpc.public_subnet_ids
  alb_security_group_id     = module.security_groups.alb_security_group_id
  certificate_arn           = var.acm_certificate_arn
  enable_deletion_protection = var.enable_alb_deletion_protection
  enable_alarms             = var.enable_cloudwatch_alarms
}

# ==========================================
# ECR Repositories
# ==========================================

module "ecr" {
  source = "./modules/ecr"

  project_name           = var.project_name
  environment            = var.environment
  enable_image_scanning  = var.enable_ecr_scanning
  image_retention_count  = var.ecr_image_retention_count
}

# ==========================================
# ECS Cluster
# ==========================================

module "ecs_cluster" {
  source = "./modules/ecs-cluster"

  project_name              = var.project_name
  environment               = var.environment
  aws_region                = var.aws_region
  aws_account_id            = local.account_id
  s3_bucket_name            = var.s3_bucket_name
  dynamodb_table_name       = var.dynamodb_table_name
  sqs_queue_name            = var.sqs_queue_name
  enable_container_insights = var.enable_container_insights
  log_retention_days        = var.log_retention_days
}

# ==========================================
# Video API Service
# ==========================================

module "video_api_service" {
  source = "./modules/ecs-service"

  project_name       = var.project_name
  environment        = var.environment
  service_name       = "video-api"
  aws_region         = var.aws_region
  cluster_id         = module.ecs_cluster.cluster_id
  cluster_name       = module.ecs_cluster.cluster_name
  container_image    = "${module.ecr.video_api_repository_url}:${var.video_api_image_tag}"
  container_port     = 8080
  task_cpu           = var.video_api_cpu
  task_memory        = var.video_api_memory
  desired_count      = var.video_api_desired_count
  execution_role_arn = module.ecs_cluster.task_execution_role_arn
  task_role_arn      = module.ecs_cluster.task_role_arn
  subnet_ids         = module.vpc.private_subnet_ids
  security_group_id  = module.security_groups.video_api_security_group_id
  assign_public_ip   = !var.enable_nat_gateway
  target_group_arn   = module.alb.video_api_target_group_arn
  log_group_name     = module.ecs_cluster.log_group_name

  environment_variables = {
    NODE_ENV                = var.environment
    PORT                    = "8080"
    AWS_REGION              = var.aws_region
    DYNAMODB_TABLE_NAME     = var.dynamodb_table_name
    S3_BUCKET_NAME          = var.s3_bucket_name
    SQS_QUEUE_URL           = "https://sqs.${var.aws_region}.amazonaws.com/${local.account_id}/${var.sqs_queue_name}"
    COGNITO_USER_POOL_ID    = var.cognito_user_pool_id
    COGNITO_CLIENT_ID       = var.cognito_client_id
    COGNITO_REGION          = var.aws_region
    ELASTICACHE_ENDPOINT    = var.elasticache_endpoint
    CACHE_TTL               = "300"
    USE_PARAMETER_STORE     = "false"
  }

  secrets = [
    {
      name      = "JWT_SECRET"
      valueFrom = "arn:aws:ssm:${var.aws_region}:${local.account_id}:parameter/videoapp/${var.environment}/jwt-secret"
    }
  ]

  enable_autoscaling    = var.enable_autoscaling
  min_capacity          = var.video_api_min_capacity
  max_capacity          = var.video_api_max_capacity
  cpu_target_value      = var.autoscaling_cpu_target
  memory_target_value   = var.autoscaling_memory_target
  enable_alarms         = var.enable_cloudwatch_alarms
}

# ==========================================
# Admin Service
# ==========================================

module "admin_service" {
  source = "./modules/ecs-service"

  project_name       = var.project_name
  environment        = var.environment
  service_name       = "admin-service"
  aws_region         = var.aws_region
  cluster_id         = module.ecs_cluster.cluster_id
  cluster_name       = module.ecs_cluster.cluster_name
  container_image    = "${module.ecr.admin_service_repository_url}:${var.admin_service_image_tag}"
  container_port     = 8081
  task_cpu           = var.admin_service_cpu
  task_memory        = var.admin_service_memory
  desired_count      = var.admin_service_desired_count
  execution_role_arn = module.ecs_cluster.task_execution_role_arn
  task_role_arn      = module.ecs_cluster.task_role_arn
  subnet_ids         = module.vpc.private_subnet_ids
  security_group_id  = module.security_groups.admin_service_security_group_id
  assign_public_ip   = !var.enable_nat_gateway
  target_group_arn   = module.alb.admin_service_target_group_arn
  log_group_name     = module.ecs_cluster.log_group_name

  environment_variables = {
    NODE_ENV              = var.environment
    PORT                  = "8081"
    AWS_REGION            = var.aws_region
    DYNAMODB_TABLE_NAME   = var.dynamodb_table_name
    S3_BUCKET_NAME        = var.s3_bucket_name
    COGNITO_USER_POOL_ID  = var.cognito_user_pool_id
    COGNITO_CLIENT_ID     = var.cognito_client_id
    COGNITO_REGION        = var.aws_region
    USE_PARAMETER_STORE   = "false"
  }

  secrets = [
    {
      name      = "JWT_SECRET"
      valueFrom = "arn:aws:ssm:${var.aws_region}:${local.account_id}:parameter/videoapp/${var.environment}/jwt-secret"
    }
  ]

  enable_autoscaling  = var.enable_autoscaling
  min_capacity        = var.admin_service_min_capacity
  max_capacity        = var.admin_service_max_capacity
  cpu_target_value    = var.autoscaling_cpu_target
  memory_target_value = var.autoscaling_memory_target
  enable_alarms       = var.enable_cloudwatch_alarms
}

# ==========================================
# Transcode Worker Service
# ==========================================

module "transcode_worker" {
  source = "./modules/ecs-service"

  project_name       = var.project_name
  environment        = var.environment
  service_name       = "transcode-worker"
  aws_region         = var.aws_region
  cluster_id         = module.ecs_cluster.cluster_id
  cluster_name       = module.ecs_cluster.cluster_name
  container_image    = "${module.ecr.transcode_worker_repository_url}:${var.transcode_worker_image_tag}"
  container_port     = 0  # No port - worker doesn't accept connections
  task_cpu           = var.transcode_worker_cpu
  task_memory        = var.transcode_worker_memory
  desired_count      = var.transcode_worker_desired_count
  execution_role_arn = module.ecs_cluster.task_execution_role_arn
  task_role_arn      = module.ecs_cluster.task_role_arn
  subnet_ids         = module.vpc.private_subnet_ids
  security_group_id  = module.security_groups.transcode_worker_security_group_id
  assign_public_ip   = !var.enable_nat_gateway
  log_group_name     = module.ecs_cluster.log_group_name

  environment_variables = {
    AWS_REGION                = var.aws_region
    DYNAMODB_TABLE_NAME       = var.dynamodb_table_name
    S3_BUCKET_NAME            = var.s3_bucket_name
    SQS_QUEUE_URL             = "https://sqs.${var.aws_region}.amazonaws.com/${local.account_id}/${var.sqs_queue_name}"
    SQS_WAIT_TIME_SECONDS     = "20"
    SQS_VISIBILITY_TIMEOUT    = "600"
    SQS_MAX_MESSAGES          = "1"
    MAX_FILE_SIZE             = "524288000"
    TEMP_DIR                  = "/tmp/transcode"
    USE_PARAMETER_STORE       = "false"
  }

  health_check_command = ["CMD-SHELL", "ps aux | grep 'node.*index.js' | grep -v grep || exit 1"]

  enable_autoscaling  = var.enable_autoscaling
  min_capacity        = var.transcode_worker_min_capacity
  max_capacity        = var.transcode_worker_max_capacity
  cpu_target_value    = var.autoscaling_cpu_target
  memory_target_value = var.autoscaling_memory_target
  enable_alarms       = var.enable_cloudwatch_alarms
}
