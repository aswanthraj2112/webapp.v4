Okay, so welcome to your last assignment for Cab 432. In this first video, I'm going to walk through just the beginning of the assignment specification. So just like assignments one and two, you can find this one in the module section of Canvas. Because you're watching this video, you've probably already found the page. So great start. There's a table of contents to begin the page, which lists a bit of the overview, what you need to do. Today, we'll talk about working in pairs and the AWS services. In the next video, I'll talk about the core criteria. In the last video, I talk about the additional criteria and just the last few dot points there from our table of contents. All right. So as an overview, in this assignment, you'll complete your Cloud project by migrating the processing tasks of your application to a Cloud architecture. That makes use of multiple Cloud compute services designed to be cost effective at a global scale. You'll also be required to write a professional report describing the work you've done. Similar to assignments one and two, this assignment is eligible for the 48 hour extension. Please make sure that you read all the information about that on the H i Q website, and our recent Canvas announcement, where doctor Matthew McKeg provided some clarifications on the 48 hour late submission period and formal extensions process. This assignment is assessing you on many more of the unit learning outcomes. You can take a look at those in your own time. But the big point here is that it also has a written component, so that is the report that you'll have to do. This one's worth 40% of your final grade. You can work individually or in a pair, which I'll talk about soon, and you'll receive a mark out of 40. So what do you need to do? This assignments practical component concentrates on horizontal scale, cloud architecture and communication patterns. These are topics that we've been covering mostly in block three. You'll submit your code alongside a short video that demonstrates your project's functionality, similar to what you've already been doing, but you'll also write a report that discusses the motivations for your project and addresses additional aspects of your project, including security and sustainability. You're free to add more functionality to your wrap or entirely replace your application. Aside from where those might interact with the criteria that we specify down below, such changes won't affect your grade for this assessment item. However, if your project didn't meet the core requirements in assignment two, then maybe some changes will be required to accommodate the development required for this assignment. So you can work in a pair to complete this one. That's entirely optional. You're also welcome to work by yourself. The complexity of this project is going to continue increasing on what you've already done in assignments one and two. It might be that working with a partner will help compensate for that additional complexity. But as I said, you are free to work on your own. However, we will be applying the market criteria the same way for individuals and pairs. If you worked with someone for assignment two, then you can continue to work with them for assignment three, or you're more than welcome to change partners or even switch back to working by yourself. You could combine the projects that you and your partner did for assignment two or start from scratch. Notably, if one partner obtains a formal extension, then you both get that extension. If you're looking for a partner, take a look on teams, we had a lot of success for people that were looking for a partner, just by them posting on teams. It seemed that everyone was able to buy up in some way. It's probably a good idea to also discuss what grade you want to achieve, how and when your partner can meet to work on the assignment, and what skills your partner and sklls yourself can bring to what you want to achieve in this assignment. Do make sure that you register your pair on Canvas? There's a separate section for registering assessment three pairs because those pairs could be different to the pairs for assessment two. If you're working alone, you don't need to register that you're working alone. If you're not registered in a pair, then we're just going to assume you did everything by yourself. Define where to register in a pair, you just go to the P tab on Canvas. There's a section there for A three pairs. Choose a pair that's empty or one that already has your buddy in it, and sign up for that group. If you accidentally sign up for the wrong group, just let us know and we can remove you from it. Make sure you send us the group number. Again, please don't sign up for a group if you're working alone. In terms of AWS services and working in pairs, being mindful that we're using the tag of Q to username to make sure that only you can interact with certain cloud resources that you create, so that other people can't accidentally edit or delete them. But we have taken special steps to account for the fact that you may be working with someone else. There is the tag Q to use name two, which allows you to tag your partner so that they can also make changes to your clad resources. Check out the page on Canvas titled AWS, working with the partner on AWS services for more information about that. In this assignment, each criterion has its own listed of approved AWS services. You should use only the services listed for that specific criterion and avoid others unless we've granted you approval otherwise. Services for general purpose are approved across the board across all criterion, and they include EC two instances, Route 53, S three, EFS, RDS, DynamoDB, the CDK, the SDK, Cloud formation, Parameter Store, Secrets Manager, and Cognito. You can take a look at the page titled AWS Services Avoable, for the full list of AWS services that are available in the CA 432 Cloud account. Being mindful that we were progressively rolling them out throughout the semester. So if you've been keeping up to date with the PAC, then you probably already know what's available to you. Services that implement substantially the same function won't count separately as there's little need to have two tools for the same job. So for example, if you deploy your own M SQL server on EC two and use RDS, then there's no real added value here because they're effectively doing the same thing. So don't do both, choose one and stick with it. 
In this video, I'm going to be talking about the core criteria of Assignment three. These criteria are related to the core learning outcomes around cloud architecture, scalability, and security. You must attempt every core criterion. Although there are no core criteria related to deployment, it is expected that you will deploy your application to our AWS account. The core criteria represent a smaller portion of the total grade than in the first assessment. That's because we're expecting that there will be a wide variety of projects, and not all the Cloud services we've studied so far will be appropriate for all projects. So that's why we have additional criteria, where you have the choice to attempt criteria that are most appropriate to your project, making up a larger portion than in previous assessment. That's what I'm going to talk about in the next video. This video, I'll focus on the core criteria, which are worth ten marks. The first one is worth three out of ten marks related to microservices. For this core criterion, we require that your application has at least two separate services running on separate compute. The separation into two services must be appropriate and not arbitrary. For example, one service might provide the main rest API or serve the web client while the other service implements the CPU intensive process that you horizontally scale. The two services must run on separate compute instances, so that could be that you've got multiple EC two instances, or you've got separate containers running in ECS, or it could be a mixture of these things, where you've got one running in ECS and the other running in EC two. To satisfy this criterion, you need to be using the AWS services EC two and ECS, unless we've approved otherwise. The next core criterion is around load distribution, worth two marks. Your application must use an appropriate mechanism for distributing load to multiple instances of the service implementing your CPU intensive process. An application load balancer may be suitable if a single instance of the service can handle multiple requests simultaneously. Or maybe a message is better used, which can be accessed by multiple instances, but delivering each message to only one instance. So the approved services for this criterion is basically any type of load balancer or SQS. The next one is around auto scaling worth three marks. The service handling, the CPU intensive task, and your application, must automatically scale horizontally in response to load. Clients or end users should not see interruptions in service while scaling out happens, although there may be some graceful degradation and service. For example, response times increase slightly until the new instances come online and are available to take a load. The service can be deployed on ECS or EC two. It's not acceptable to use Lambda for this EPU intensive service. That's not the purpose of Lambda. You'll need to demonstrate auto scaling from one instance or container up to three instances or containers in response to load, and then back down to one when load is reduced. The default choice for scaling is average CPU utilisation with the target set to 70%. It's not acceptable to reduce a target to compensate for an inability to achieve a higher average CPU utilisation. If you're using a custom metric, then the scaling must be successful with that metric instead. For EC two, take care that if you're using a single thread app that you use a single CPU instance type like a T two micro where it's only got a single virtual CPU. Also, be mindful that the credit specification is set to unlimited for the versi T two or even T three instant types. For this criterion, the list of approved services are auto scaling groups and EC two, target groups, application auto scaling in ECS, Cloud watch and perhaps Lambda for your custom metric, but not Lambda for the CPU intensive service. The last core criterion is about HTTPS, which is worth two marks. Your App must be accessible on the public Internet over HTTPS with a valid certificate. That requires you to have a subdomain of 432.com, set up in Route 53 using a C name record, pointing to an appropriate endpoint for your application. This was not assessed. This is not assessed here as it was assessed in assessment two, but it is required in order to obtain a certificate. It also requires that you've requested and obtained a certificate using ACM, and it also requires that you're using an API gateway or an application load balancer configured to use that certificate and requests to your server instances serving the publicly accessible web client and rest API. It is acceptable to use an API gateway or application load balancer for this purpose, even if you're not using the other functionality that they provide. But do note that in the case that they don't count towards the additional communication mechanism in the criteria below, in which I will describe in the next video. The list of approved services for this criterion are Route 53, the application load balancer API gateway, cloud front, and certificate manager. 
Okay, this is the final video for Assignment three. It's probably going to be a bit longer than the last two because there's more additional criteria than there are core criteria. And there's a little bit at the end of the page that I'll finish up with. The additional criteria worth 14 marks. We've provided an excessive number of additional criteria. Importantly, you do not need to attempt all of them. Keep in mind that we'll stop marking once we've considered enough additional criteria to account for 14 marks, regardless of whether you've earned the full 14 marks. There's also an upon request criterion that requires approval by the unit coordinator. You can't achieve more than 14 marks from these tasks. We're only going to mark the ones that you explicitly tell us to consider. Do make sure that in your response to marking criteria document in the report, you tell us exactly which additional criteria we are going to mark. You should choose the most appropriate ones for your application and those that you'll achieve the best outcome for. You can read more details in the marking rubric and make sure that you complete the tasks in such a way that the marking rubric is satisfied because that is what we're looking at when we're marking your assignment. Again, it's not expected that you respond to all additional criteria as they very much depend on the details of your application, so choose the ones that are best suited to you. The first one for two marks is looking at additional microservices. This one is about adding more microservices to your Cloud architecture. Attempting this criteria means that you'll have at least four microservices in total, which accounts for those that you implemented for the core criteria as well. When we say at least four, that means accounting for both the core criteria and the additional criteria. The division into multiple services must be appropriate and not arbitrary, and each service should be deployed on its own compute. Again, you can use a mixture of EC two and ECS, or you could exclusively use one or the other. Therefore, the list of approved services for this criterion matches the associated core criterion. The next one is about Servius functions for two marks. Here we're looking for your application using Lambda to deploy one or more services. Lambda must be an appropriate choice for the services being deployed in this manner. Some good examples could be implementing a custom mechanism for auto scaling. It could be responding to events like queuing up the processing of tasks, when the clients finished uploading a file to S three via a presigned URLs. That would be S three notifies you that the file is available, and your Lambda function simply queues a message on an SQSQ. But the Lambda function is not doing the CPU intensive work itself, or maybe another good example could be around using a lightweight public facing service. Again, it's not acceptable to use Lambda for your application, CPU intensive task. The list of approved services for this criterion are of course Lamdar, but also event bridge. And any of the other AWS services that can trigger a Lambda function to be invoked. The next one is looking at container orchestration with ECS for two marks. This criterion is looking for the use of ECS to deploy at least one microservice. To satisfy this criterion, you must be using ECS. The next additional criterion is looking at advanced container orchestration with ECS for two marks. Here we're looking for you to be using advanced features of ECS. We expect at least two additional functions, it could be service discovery, rolling updates with value detection, or tasks launched in response to events or on a schedule. So of course, here you're going to be using ECS. The next one, communication mechanisms for two marks. EAP uses additional communication services beyond what is used for load distribution. That could include Ques, API gateways, using routing functionality in an application load balancer, or maybe using publication subscription mechanisms. The communication mechanisms used should be appropriate to the task. Using API gateway style functionality in an application load balancer counts separately from its load balancing functionality. That is using listener rules to route traffic based on path or method, those sorts of things, counts as a separate communication mechanism. Take note that an API gateway or an ALB used solely for implementing TLS or that is HTTPS does not count towards this criterion. For this one, you should be looking at services like SQS, API gateway, load balances, and vent bridge. The next one, custom scaling metric for two marks. Your AAP must use an appropriate scaling metric other than the average CPU utilisation to improve auto scaling. We're looking for appropriate scaling and load distribution. The chosen mechanism should handle increasing traffic without overloading instances or causing service interruptions. We're looking for improvement over just using the average CPU utilisation. Your metric should better match your application's needs. It needs to make sense. That should lead to improvements such as faster responses to the client. And hopefully, also more efficient use of cloud resources. We're also looking for scalability across different sizes, and we're looking for the mechanism working effectively, whether your application runs on a single instance or scales up to perhaps hundreds of instances. Here we're using the word the phrase scaling mechanism quite broadly. You may use a target metric, simple scaling, or step scaling. The services you can use to satisfy this criterion are Cloud watch and Lambda. The next one is infrastructure's code for two marks. For this criterion, you should aim to use infrastructure as code to deploy the ADOBS services that your app uses relating to core and additional criterion for this assessment. Basically, the entire app needs to be deployable vi IAC with the idea that it's basically click to deploy with minimal human intervention. We won't evaluate deployment for services covered in assessments 12. That means that we're really looking at the services listed in that should say block three. The list of approved services include Terraform, the CDK, and clad formation. If you want to use other technologies, please ask the teaching team first. The next one is the Dead Letter Q for two marks. For this criterion, you should take advantage of the dead letter Q feature of SQS to appropriately handle messages that cannot be processed successfully. It only makes sense to attempt this criterion if you're already using SQS. The intention is to redirect messages that repeatedly fail processing to the dead letter Q, instead of them being lost or endlessly retried. You must implement appropriate handling of the messages that end up in the dead letter Q. The list of approved services here are SQS and the associated workers that consume the messages on the dead Letter Q. The next one is around edge caching for two marks. Your app should make appropriate use of edge caching with cloud front, which means you should have a convincing reason that the data your caching will be accessed frequently. That doesn't necessarily have to be true right now, but it should be true in imagine world where your app is truly wide has wide scale deployment. This also means that data of the king needs to be infrequently changed. For our purposes, this basically means that the data needs to be static. Resources like a frontend app being composed of HTML, CSS, and JavaScript and maybe some other assets. They're good candidates. Here, the services you should be using are Cloudfront and elastic. The last one is the on request additional criterion for two marks. This one is really broad. You can seek approval from the unit coordinator, but you're not allowed to attempt it until you've gained approval. The same setup that we had in the previous assessments. This last part, write a report for 21 marks. You report will cover the following topics. A description and diagram of the architecture of your application. Justification for your architecture choices in the design of your app. A discussion of further development that would be necessary to make your app scalable and secure for large scale deployment, Implications of your architecture choices on sustainability, inclusion of a cost estimate calculated using the official AWS pricing calculator, and more details about these topics can be found on the page titled 3.1 submission specification. It breaks down in quite a bit of detail what you need to do for this report. I'm not going to talk about that in this video. Okay, so technologies and special permission. We're going to follow the same guidelines that we did for Assignments one and two. You don't need special permission for technologies that you've already used in assessments one or two. And you also don't need special permission if the technology is listed on the page titled AWS Services Avable. If you want to use the technology outside the scope of those areas, then you do need approval from a unit coordinator. Just wrapping up, you'll need to submit three things, your code, a video demonstration, which is very similar to what you've already done for assignments one and two, and the report. Again, more information about that submission process can be found on that page titled submission specification. We'll respond to your submission within ten to 15 working days, but this being the last assignment of CB 432, we're not actually allowed to release your mark until the university has released final grades. That's out of our hands. We will have to wait for that for officially releasing your mark to via Canvas, but you will receive written feedback, as well as the mark being self evident via the marking rubric. And we'll go through the usual moderation process where the entire teaching team is working with the same set of notes under the same judgments of all submissions. 
One final video. This one is optional. I'm just going to walk through the page titled submission specification for assignment three. Let's scroll past the table of contents and look at the report section. There's a submission portal specifically for the report. You must submit as a PDF, and we've provided a template in three different formats, one in markdown, one in tech, and one is a word document file. If you're not interested in using any of those formats, feel free to convert them to anything else using a tool like Pan dook or recreate it elsewhere. Just make sure you're submitting a PDF to us. The structure of the report is an overview of your App, the architecture of your App, including a diagram, a justification, and the response to criteria, and then a cost estimate, description of how you scale up, a reflection on security and sustainability as well. Let's dive deeper into those. Your app overview, give a brief, one paragraph overview of what your app does. In regarding the architecture, you need to include a diagram. You need to show all the services that you use and how they connect to each other. This diagram needs to be made digitally. We don't want hand drawn diagrams. You could use tools like Cloud craft or draw dot IO or many of the other drawing and diagramming tools that are available online. Draw dot IO is a good starting point. It has already the icons for the full suite of Ada Bare services available as a library there. Cloud craft, of course, it's also going to have those because it is a diagramming tool specifically for depicting Cloud architectures. Make sure you briefly discuss the main use of each service. You can do that using bullet points. The next section is the justification of the architecture. Discuss your reasoning for the major choices in your Cloud architecture. The discussion should cover a choice of division into microservices. Why these micro services instead of some other that you could have used to divide up functionality. The choice of compute, y EC two versus ECS versus Lambda. The choice of communication mechanisms and load distribution mechanism. The choice of using service abstractions like API gateway and load balancer, or maybe not using them. Be sure to include your justification by sorry, be sure that in your justification, you make reference to where appropriate, microservice resource requirements, and in particular the requirements of your CPU intensive process and the functionality of your app. You can also make reference to ease of implementation and scalability. This section is really about why your architecture as it is, and not necessarily just a description of the architecture. Really tell us why Okay. Then it's followed by the responsive marking criteria for this project. You've already seen these. This time, it's not a separate markdown document. It's embedded within the report itself. The next section is around an estimation of the cost of your solution. Although cost optimization has not been the primary focus of this project nor the unit, this area is looking at just estimating the monthly cost of your solution. Assuming it has an average demand of 50 concurrent users. You need to estimate what that looks like by plugging in some values into the AWS price and calculator. You need to think about things like average CPU utilisation, RAM usage, bucket storage, all the various metrics that you might be using, all these sorts of things. Once you've got the calculator reflecting what you think it would cost, make sure that you click the share button on the calculator and make a publicly sharable link. That way you can paste that link into your report. We can click on the link and take a look at at your cost estimate. The next section, scaling up the app. Suppose your app is going to be deployed to support 10,000 concurrent users. Discuss what changes would be required to your app in order to support this number of users. Your discussion should cover microservices. Would you change the current arrangement? How would you change it and why? It should also cover the compute. What other types of compute could you use? A changes to auto scaling required? What about load distribution? Would you need additional types of load distribution or change in the mechanism? Make sure you justify your proposed changes? The next section is around securing the app. So suppose your app is being used commercially and that successful cyber attacks against your app would drive customers away, costing you a lot of money. Discuss the measures that you've already taken or could take to secure your app. For each measure, mention a security principle that it relates to, for example, like least privilege or separation of duties. It's not necessary to discuss security controls that would be implemented outside of the Cloud environment, such as educating staff, pen testing, et cetera. You only need to discuss controls that you would implement within your app and its Cloud environment. The section on sustainability. This looks at what choices can you make to improve the sustainability of your App. Consider how your choices can make an impact at each of these levels being software, hardware, data centre, and resources. Depending on your app, you may not have much to say at some levels, in which case, you can discuss some choices that you could make, supposing that your App had additional relevant functionality where those choices would make sense. Be sure to justify your choices. We will evaluate the overall quality of your report in terms of writing style, understandability for an audience of your peers. Your audience that you're writing to Card 432 students. We'll also look at the formatting, presentation, and appropriate use of citations where applicable. If you do cite external resources, we're happy for you to use any citation style that's been listed on the QUT site write website. Just make sure that you pick one style and stick with it. The next section of this page talks about the video submission requirements. As with previous assignments in Cab 432, make sure your video is actually submitted. In Canvas, it's a two step process, you upload the video, then you submit the video. It's two different steps. There's a separate portal just for the video. If you're working in the pair, only one partner needs to submit. The video must not be longer than 10 minutes, and it must follow the structure that we've provided below to demonstrate your apps functionality. Be sure you capture your screen at a high enough quality that the marker can make out details such as text. Recording from your phone or some external device is not acceptable. Make sure you're using a reasonable screen resolution. For example, if you're on a four K screen, could you please adjust your resolution back down to HD because sometimes we're not watching from a four K screen, and a four K video on a HD screen doesn't appear very nicely in terms of making a text readable, or alternatively, just oo in. Make your text size much bigger like I have to record this video. You may notice in the URL bar, I've zoomed in to 163%. The purpose of the video is to demonstrate functionality, not explain it. That's what the report is for. To create your video, you could record a whole bunch of short videos and edit them together. Or you can record one really long one and cut things out of it. OBS Studio is a good choice for screen capture. Otherwise Zoom is another good one. If you're working with a body, then probably Zoom is the best option because then you can both be in the call in one of you just share screen, or maybe you both share screen, you can just switch between screen shares if you can do that quickly. Canvas has a built in a built in screen capturing tool. When you go to the submission portal, just click Record Media and you should be able to access it from there. The structure of the video is really important. The order is critical. We want you to first address some of the core criteria including microservices, and then additional microservices, and then Servius, and then ECS. We're really focusing on the compute side. And then move on to load distribution. If you've done Dad Letter Qs, talk about dead Letter Qs at this point. You can also talk about communication mechanisms following that. Moving on, you can talk about auto scaling and your custom scaling metric. And then HTTPS. Then you can talk about container orchestration features, going on to infrastructure's code, education, and finally, if you're doing it, the upon request one. I'm going to leave it to you to read through each of those in the extra detail that we've provided. To finish up this video, when you're submitting your code, do make sure you're submitting to the correct portal, which is via grade scope once again. You don't need to include your get folder node modules, V or the Mac OSX directory. None of those we need. They're just bloating your submission, and if we really need to, we can obtain those third party packages from the repositories online. It causes some issues when it comes to marking, which could delay your mark or could inadvertently see your mark decreased because we had issues even accessing your code. Be mindful that grade scope doesn't handle submissions in excess of 100 megabytes particularly well to the point that it will reject it as well. So if you've got files or assets in your submission that aren't really needed, please delete them. If we do need a copy, we can always reach out to you and you can provide one upon our request. Okay, so that's all for this video. 
